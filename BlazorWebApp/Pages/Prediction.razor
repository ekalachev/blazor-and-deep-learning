@page "/prediction"
@inject HttpClient Client

<label>Sepal Length: </label>
<input type="text" @bind="_sepalLength"><br>
<label>Sepal Width: </label>
<input type="text" @bind="_sepalWidth"><br>
<label>Petal Length: </label>
<input type="text" @bind="_petalLength"><br>
<label>Petal Width: </label>
<input type="text" @bind="_petalWidth"><br>
<button @onclick="GetPrediction">Make prediction</button>

@if (ModelPrediction == null)
{
    <p>Enter data to get a prediction</p>
}
else
{
    <p>@ModelPrediction</p>
}


@code {
    private PredictionEngine<ModelInput, ModelOutput> _predictionEngine;
    private string _sepalLength, _sepalWidth, _petalLength, _petalWidth, ModelPrediction;

    protected override async Task OnInitializedAsync()
    {
        var modelPath = "./sample-data/model.zip";
        
        var savedModel = await Client.GetStreamAsync(modelPath);
        var mlContext = new MLContext();
        var model = mlContext.Model.Load(savedModel, out DataViewSchema schema);
        
        _predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(model);
    }

    private void GetPrediction()
    {
        var input = new ModelInput
        {
            SepalLength = float.Parse(_sepalLength),
            SepalWidth = float.Parse(_sepalWidth),
            PetalLength = float.Parse(_petalLength),
            PetalWidth = float.Parse(_petalWidth)
        };

        var prediction = _predictionEngine.Predict(input);

        ModelPrediction = prediction.PredictedLabel;
    }
}
